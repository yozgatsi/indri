/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: interface/indri.i

#define SWIGMODULE indri_go

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } SWIGSTRUCTPACKED a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


#define SWIG_exception(code, msg) _swig_gopanic(msg)


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include "indri/indri-platform.h"
#ifdef INDRI_STANDALONE
#include "lemur/lemur-compat.hpp"
#else
#include "lemur-compat.hpp"
#endif
#include "indri/QueryEnvironment.hpp"
#include "indri/QueryExpander.hpp"
#include "indri/RMExpander.hpp"
#include "indri/PonteExpander.hpp"
#include "indri/ScoredExtentResult.hpp"
#include "indri/ParsedDocument.hpp"
#include "indri/IndexEnvironment.hpp"
#include "indri/Parameters.hpp"
#include "indri/ConflationPattern.hpp"
#include "indri/ReformulateQuery.hpp"

#ifdef INDRI_STANDALONE
#include "lemur/Exception.hpp"
#else
#include "Exception.hpp"
#endif
  

#include <string>



#ifdef INDRI_STANDALONE
#include "lemur/lemur-compat.hpp"
#else
#include "lemur-compat.hpp"
#endif
#include "indri/QueryEnvironment.hpp"
#include "indri/QueryExpander.hpp"
#include "indri/RMExpander.hpp"
#include "indri/PonteExpander.hpp"
#ifdef INDRI_STANDALONE
#include "lemur/Exception.hpp"
#else
#include "Exception.hpp"
#endif

  // remap overloaded method names.
  // may want to use %rename here?
#define onetermCount termCount
#define onedocumentCount documentCount
#define runQuerydocset runQuery
#define runAnnotatedQuerydocset runAnnotatedQuery
#define documentsdocids documents
#define documentMetadatadocids documentMetadata

#define set_int set
#define set_bool set
#define set_string set
#define set_UINT64 set
#define set_double set
#define get_bool get
#define get_int get
#define get_string get
#define get_INT64 get
#define get_double get

  

#include <vector>
#include <stdexcept>

SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include "indri/TagList.hpp"

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_indri_go_8c4c74c3cec9541e(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_indri_go_8c4c74c3cec9541e(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


std::vector< int > *_wrap_new_IntVector__SWIG_0_indri_go_8c4c74c3cec9541e() {
  std::vector< int > *result = 0 ;
  std::vector< int > *_swig_go_result;
  
  
  result = (std::vector< int > *)new std::vector< int >();
  *(std::vector< int > **)&_swig_go_result = (std::vector< int > *)result; 
  return _swig_go_result;
}


std::vector< int > *_wrap_new_IntVector__SWIG_1_indri_go_8c4c74c3cec9541e(long long _swig_go_0) {
  std::vector< int >::size_type arg1 ;
  std::vector< int > *result = 0 ;
  std::vector< int > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< int > *)new std::vector< int >(arg1);
  *(std::vector< int > **)&_swig_go_result = (std::vector< int > *)result; 
  return _swig_go_result;
}


long long _wrap_IntVector_size_indri_go_8c4c74c3cec9541e(std::vector< int > *_swig_go_0) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  
  result = ((std::vector< int > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_IntVector_capacity_indri_go_8c4c74c3cec9541e(std::vector< int > *_swig_go_0) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  
  result = ((std::vector< int > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_IntVector_reserve_indri_go_8c4c74c3cec9541e(std::vector< int > *_swig_go_0, long long _swig_go_1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_IntVector_isEmpty_indri_go_8c4c74c3cec9541e(std::vector< int > *_swig_go_0) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  
  result = (bool)((std::vector< int > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_IntVector_clear_indri_go_8c4c74c3cec9541e(std::vector< int > *_swig_go_0) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_IntVector_add_indri_go_8c4c74c3cec9541e(std::vector< int > *_swig_go_0, intgo _swig_go_1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  arg2 = (std::vector< int >::value_type *)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
  
}


intgo _wrap_IntVector_get_indri_go_8c4c74c3cec9541e(std::vector< int > *_swig_go_0, intgo _swig_go_1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  intgo _swig_go_result;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
  _swig_go_result = (int)*result; 
  return _swig_go_result;
}


void _wrap_IntVector_set_indri_go_8c4c74c3cec9541e(std::vector< int > *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (std::vector< int >::value_type *)&_swig_go_2; 
  
  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
  
}


void _wrap_delete_IntVector_indri_go_8c4c74c3cec9541e(std::vector< int > *_swig_go_0) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = *(std::vector< int > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< std::string > *_wrap_new_StringVector__SWIG_0_indri_go_8c4c74c3cec9541e() {
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;
  
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result; 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_new_StringVector__SWIG_1_indri_go_8c4c74c3cec9541e(long long _swig_go_0) {
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result; 
  return _swig_go_result;
}


long long _wrap_StringVector_size_indri_go_8c4c74c3cec9541e(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  result = ((std::vector< std::string > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_StringVector_capacity_indri_go_8c4c74c3cec9541e(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  result = ((std::vector< std::string > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_StringVector_reserve_indri_go_8c4c74c3cec9541e(std::vector< std::string > *_swig_go_0, long long _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_StringVector_isEmpty_indri_go_8c4c74c3cec9541e(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_StringVector_clear_indri_go_8c4c74c3cec9541e(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_StringVector_add_indri_go_8c4c74c3cec9541e(std::vector< std::string > *_swig_go_0, _gostring_ _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  std::vector< std::string >::value_type arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
  
}


_gostring_ _wrap_StringVector_get_indri_go_8c4c74c3cec9541e(std::vector< std::string > *_swig_go_0, intgo _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_StringVector_set_indri_go_8c4c74c3cec9541e(std::vector< std::string > *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  std::vector< std::string >::value_type arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
  
}


void _wrap_delete_StringVector_indri_go_8c4c74c3cec9541e(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  delete arg1;
  
}


indri::api::Parameters *_wrap_new_Parameters_indri_go_8c4c74c3cec9541e() {
  indri::api::Parameters *result = 0 ;
  indri::api::Parameters *_swig_go_result;
  
  
  result = (indri::api::Parameters *)new indri::api::Parameters();
  *(indri::api::Parameters **)&_swig_go_result = (indri::api::Parameters *)result; 
  return _swig_go_result;
}


void _wrap_delete_Parameters_indri_go_8c4c74c3cec9541e(indri::api::Parameters *_swig_go_0) {
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  
  arg1 = *(indri::api::Parameters **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_Parameters_set_indri_go_8c4c74c3cec9541e(indri::api::Parameters *_swig_go_0, _gostring_ _swig_go_1) {
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(indri::api::Parameters **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  (arg1)->set((std::string const &)*arg2);
  
}


bool _wrap_Parameters_get_bool_indri_go_8c4c74c3cec9541e(indri::api::Parameters *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(indri::api::Parameters **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (bool)_swig_go_2; 
  
  result = (bool)(arg1)->get_bool((std::string const &)*arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Parameters_get_int_indri_go_8c4c74c3cec9541e(indri::api::Parameters *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(indri::api::Parameters **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  result = (int)(arg1)->get_int((std::string const &)*arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_Parameters_get_double_indri_go_8c4c74c3cec9541e(indri::api::Parameters *_swig_go_0, _gostring_ _swig_go_1, double _swig_go_2) {
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(indri::api::Parameters **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (double)_swig_go_2; 
  
  result = (double)(arg1)->get_double((std::string const &)*arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_Parameters_get_INT64_indri_go_8c4c74c3cec9541e(indri::api::Parameters *_swig_go_0, _gostring_ _swig_go_1, long long _swig_go_2) {
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  std::string *arg2 = 0 ;
  INT64 arg3 ;
  INT64 result;
  long long _swig_go_result;
  
  arg1 = *(indri::api::Parameters **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (INT64)_swig_go_2; 
  
  result = (INT64)(arg1)->get_INT64((std::string const &)*arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_Parameters_get_string_indri_go_8c4c74c3cec9541e(indri::api::Parameters *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(indri::api::Parameters **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  result = (arg1)->get_string((std::string const &)*arg2,(std::string const &)*arg3);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


void _wrap_Parameters_remove_indri_go_8c4c74c3cec9541e(indri::api::Parameters *_swig_go_0, _gostring_ _swig_go_1) {
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(indri::api::Parameters **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  (arg1)->remove((std::string const &)*arg2);
  
}


void _wrap_Parameters_set_bool_indri_go_8c4c74c3cec9541e(indri::api::Parameters *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = *(indri::api::Parameters **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (bool)_swig_go_2; 
  
  (arg1)->set_bool((std::string const &)*arg2,arg3);
  
}


void _wrap_Parameters_set_string_indri_go_8c4c74c3cec9541e(indri::api::Parameters *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(indri::api::Parameters **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  (arg1)->set_string((std::string const &)*arg2,(std::string const &)*arg3);
  
}


void _wrap_Parameters_set_int_indri_go_8c4c74c3cec9541e(indri::api::Parameters *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  arg1 = *(indri::api::Parameters **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  (arg1)->set_int((std::string const &)*arg2,arg3);
  
}


void _wrap_Parameters_set_UINT64_indri_go_8c4c74c3cec9541e(indri::api::Parameters *_swig_go_0, _gostring_ _swig_go_1, long long _swig_go_2) {
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  std::string *arg2 = 0 ;
  UINT64 arg3 ;
  
  arg1 = *(indri::api::Parameters **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (UINT64)_swig_go_2; 
  
  (arg1)->set_UINT64((std::string const &)*arg2,arg3);
  
}


void _wrap_Parameters_set_double_indri_go_8c4c74c3cec9541e(indri::api::Parameters *_swig_go_0, _gostring_ _swig_go_1, double _swig_go_2) {
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  arg1 = *(indri::api::Parameters **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (double)_swig_go_2; 
  
  (arg1)->set_double((std::string const &)*arg2,arg3);
  
}


void _wrap_Parameters_clear_indri_go_8c4c74c3cec9541e(indri::api::Parameters *_swig_go_0) {
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  
  arg1 = *(indri::api::Parameters **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


long long _wrap_Parameters_size_indri_go_8c4c74c3cec9541e(indri::api::Parameters *_swig_go_0) {
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(indri::api::Parameters **)&_swig_go_0; 
  
  result = (arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Parameters_exists_indri_go_8c4c74c3cec9541e(indri::api::Parameters *_swig_go_0, _gostring_ _swig_go_1) {
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(indri::api::Parameters **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (bool)(arg1)->exists((std::string const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Parameters_load_indri_go_8c4c74c3cec9541e(indri::api::Parameters *_swig_go_0, _gostring_ _swig_go_1) {
  indri::api::Parameters *arg1 = (indri::api::Parameters *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(indri::api::Parameters **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  (arg1)->load((std::string const &)*arg2);
  
}


void _wrap_TermExtent_begin_set_indri_go_8c4c74c3cec9541e(indri::parse::TermExtent *_swig_go_0, intgo _swig_go_1) {
  indri::parse::TermExtent *arg1 = (indri::parse::TermExtent *) 0 ;
  int arg2 ;
  
  arg1 = *(indri::parse::TermExtent **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->begin = arg2;
  
}


intgo _wrap_TermExtent_begin_get_indri_go_8c4c74c3cec9541e(indri::parse::TermExtent *_swig_go_0) {
  indri::parse::TermExtent *arg1 = (indri::parse::TermExtent *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(indri::parse::TermExtent **)&_swig_go_0; 
  
  result = (int) ((arg1)->begin);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_TermExtent_end_set_indri_go_8c4c74c3cec9541e(indri::parse::TermExtent *_swig_go_0, intgo _swig_go_1) {
  indri::parse::TermExtent *arg1 = (indri::parse::TermExtent *) 0 ;
  int arg2 ;
  
  arg1 = *(indri::parse::TermExtent **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->end = arg2;
  
}


intgo _wrap_TermExtent_end_get_indri_go_8c4c74c3cec9541e(indri::parse::TermExtent *_swig_go_0) {
  indri::parse::TermExtent *arg1 = (indri::parse::TermExtent *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(indri::parse::TermExtent **)&_swig_go_0; 
  
  result = (int) ((arg1)->end);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_TermExtent_indri_go_8c4c74c3cec9541e(indri::parse::TermExtent *_swig_go_0) {
  indri::parse::TermExtent *arg1 = (indri::parse::TermExtent *) 0 ;
  
  arg1 = *(indri::parse::TermExtent **)&_swig_go_0; 
  
  delete arg1;
  
}


indri::parse::TermExtent *_wrap_new_TermExtent_indri_go_8c4c74c3cec9541e() {
  indri::parse::TermExtent *result = 0 ;
  indri::parse::TermExtent *_swig_go_result;
  
  
  result = (indri::parse::TermExtent *)new indri::parse::TermExtent();
  *(indri::parse::TermExtent **)&_swig_go_result = (indri::parse::TermExtent *)result; 
  return _swig_go_result;
}


void _wrap_delete_ScoredExtentResult_indri_go_8c4c74c3cec9541e(indri::api::ScoredExtentResult *_swig_go_0) {
  indri::api::ScoredExtentResult *arg1 = (indri::api::ScoredExtentResult *) 0 ;
  
  arg1 = *(indri::api::ScoredExtentResult **)&_swig_go_0; 
  
  delete arg1;
  
}


indri::api::ScoredExtentResult *_wrap_new_ScoredExtentResult_indri_go_8c4c74c3cec9541e() {
  indri::api::ScoredExtentResult *result = 0 ;
  indri::api::ScoredExtentResult *_swig_go_result;
  
  
  result = (indri::api::ScoredExtentResult *)new indri::api::ScoredExtentResult();
  *(indri::api::ScoredExtentResult **)&_swig_go_result = (indri::api::ScoredExtentResult *)result; 
  return _swig_go_result;
}


void _wrap_delete_ParsedDocument_indri_go_8c4c74c3cec9541e(indri::api::ParsedDocument *_swig_go_0) {
  indri::api::ParsedDocument *arg1 = (indri::api::ParsedDocument *) 0 ;
  
  arg1 = *(indri::api::ParsedDocument **)&_swig_go_0; 
  
  delete arg1;
  
}


_gostring_ _wrap_ParsedDocument_getContent_indri_go_8c4c74c3cec9541e(indri::api::ParsedDocument *_swig_go_0) {
  indri::api::ParsedDocument *arg1 = (indri::api::ParsedDocument *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(indri::api::ParsedDocument **)&_swig_go_0; 
  
  result = (arg1)->getContent();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


indri::api::ParsedDocument *_wrap_new_ParsedDocument_indri_go_8c4c74c3cec9541e() {
  indri::api::ParsedDocument *result = 0 ;
  indri::api::ParsedDocument *_swig_go_result;
  
  
  result = (indri::api::ParsedDocument *)new indri::api::ParsedDocument();
  *(indri::api::ParsedDocument **)&_swig_go_result = (indri::api::ParsedDocument *)result; 
  return _swig_go_result;
}


indri::api::QueryAnnotationNode *_wrap_new_QueryAnnotationNode_indri_go_8c4c74c3cec9541e() {
  indri::api::QueryAnnotationNode *result = 0 ;
  indri::api::QueryAnnotationNode *_swig_go_result;
  
  
  result = (indri::api::QueryAnnotationNode *)new indri::api::QueryAnnotationNode();
  *(indri::api::QueryAnnotationNode **)&_swig_go_result = (indri::api::QueryAnnotationNode *)result; 
  return _swig_go_result;
}


void _wrap_delete_QueryAnnotationNode_indri_go_8c4c74c3cec9541e(indri::api::QueryAnnotationNode *_swig_go_0) {
  indri::api::QueryAnnotationNode *arg1 = (indri::api::QueryAnnotationNode *) 0 ;
  
  arg1 = *(indri::api::QueryAnnotationNode **)&_swig_go_0; 
  
  delete arg1;
  
}


indri::api::QueryAnnotationNode *_wrap_QueryAnnotation_getQueryTree_indri_go_8c4c74c3cec9541e(indri::api::QueryAnnotation *_swig_go_0) {
  indri::api::QueryAnnotation *arg1 = (indri::api::QueryAnnotation *) 0 ;
  indri::api::QueryAnnotationNode *result = 0 ;
  indri::api::QueryAnnotationNode *_swig_go_result;
  
  arg1 = *(indri::api::QueryAnnotation **)&_swig_go_0; 
  
  try {
    result = (indri::api::QueryAnnotationNode *)((indri::api::QueryAnnotation const *)arg1)->getQueryTree();
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  *(indri::api::QueryAnnotationNode **)&_swig_go_result = (indri::api::QueryAnnotationNode *)result; 
  return _swig_go_result;
}


indri::infnet::EvaluatorNode::MResults *_wrap_QueryAnnotation_getAnnotations_indri_go_8c4c74c3cec9541e(indri::api::QueryAnnotation *_swig_go_0) {
  indri::api::QueryAnnotation *arg1 = (indri::api::QueryAnnotation *) 0 ;
  indri::infnet::EvaluatorNode::MResults *result = 0 ;
  indri::infnet::EvaluatorNode::MResults *_swig_go_result;
  
  arg1 = *(indri::api::QueryAnnotation **)&_swig_go_0; 
  
  result = (indri::infnet::EvaluatorNode::MResults *) &((indri::api::QueryAnnotation const *)arg1)->getAnnotations();
  *(indri::infnet::EvaluatorNode::MResults **)&_swig_go_result = result; 
  return _swig_go_result;
}


std::vector< indri::api::ScoredExtentResult > *_wrap_QueryAnnotation_getResults_indri_go_8c4c74c3cec9541e(indri::api::QueryAnnotation *_swig_go_0) {
  indri::api::QueryAnnotation *arg1 = (indri::api::QueryAnnotation *) 0 ;
  std::vector< indri::api::ScoredExtentResult > *result = 0 ;
  std::vector< indri::api::ScoredExtentResult > *_swig_go_result;
  
  arg1 = *(indri::api::QueryAnnotation **)&_swig_go_0; 
  
  result = (std::vector< indri::api::ScoredExtentResult > *) &((indri::api::QueryAnnotation const *)arg1)->getResults();
  *(std::vector< indri::api::ScoredExtentResult > **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_QueryAnnotation_indri_go_8c4c74c3cec9541e(indri::api::QueryAnnotation *_swig_go_0) {
  indri::api::QueryAnnotation *arg1 = (indri::api::QueryAnnotation *) 0 ;
  
  arg1 = *(indri::api::QueryAnnotation **)&_swig_go_0; 
  
  delete arg1;
  
}


indri::api::QueryEnvironment *_wrap_new_QueryEnvironment_indri_go_8c4c74c3cec9541e() {
  indri::api::QueryEnvironment *result = 0 ;
  indri::api::QueryEnvironment *_swig_go_result;
  
  
  result = (indri::api::QueryEnvironment *)new indri::api::QueryEnvironment();
  *(indri::api::QueryEnvironment **)&_swig_go_result = (indri::api::QueryEnvironment *)result; 
  return _swig_go_result;
}


void _wrap_QueryEnvironment_addServer_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, _gostring_ _swig_go_1) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  try {
    (arg1)->addServer((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_QueryEnvironment_addIndex_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, _gostring_ _swig_go_1) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  try {
    (arg1)->addIndex((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_QueryEnvironment_removeServer_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, _gostring_ _swig_go_1) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  try {
    (arg1)->removeServer((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_QueryEnvironment_removeIndex_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, _gostring_ _swig_go_1) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  try {
    (arg1)->removeIndex((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_QueryEnvironment_close_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  try {
    (arg1)->close();
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_QueryEnvironment_setMemory_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, long long _swig_go_1) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  UINT64 arg2 ;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  arg2 = (UINT64)_swig_go_1; 
  
  try {
    (arg1)->setMemory(arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_QueryEnvironment_setScoringRules_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, std::vector< std::string > *_swig_go_1) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  
  try {
    (arg1)->setScoringRules((std::vector< std::string > const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_QueryEnvironment_setStopwords_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, std::vector< std::string > *_swig_go_1) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  
  try {
    (arg1)->setStopwords((std::vector< std::string > const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


std::vector< indri::api::ScoredExtentResult > *_wrap_QueryEnvironment_runQuery__SWIG_0_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  SwigValueWrapper< std::vector< indri::api::ScoredExtentResult > > result;
  std::vector< indri::api::ScoredExtentResult > *_swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  try {
    result = (arg1)->runQuery((std::string const &)*arg2,arg3);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  *(std::vector< indri::api::ScoredExtentResult > **)&_swig_go_result = new std::vector< indri::api::ScoredExtentResult >(result); 
  return _swig_go_result;
}


std::vector< indri::api::ScoredExtentResult > *_wrap_QueryEnvironment_runQuery__SWIG_1_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, _gostring_ _swig_go_1, std::vector< int > *_swig_go_2, intgo _swig_go_3) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  int arg4 ;
  SwigValueWrapper< std::vector< indri::api::ScoredExtentResult > > result;
  std::vector< indri::api::ScoredExtentResult > *_swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< int > **)&_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  
  try {
    result = (arg1)->runQuery((std::string const &)*arg2,(std::vector< int > const &)*arg3,arg4);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  *(std::vector< indri::api::ScoredExtentResult > **)&_swig_go_result = new std::vector< indri::api::ScoredExtentResult >(result); 
  return _swig_go_result;
}


indri::api::QueryAnnotation *_wrap_QueryEnvironment_runAnnotatedQuery__SWIG_0_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  indri::api::QueryAnnotation *result = 0 ;
  indri::api::QueryAnnotation *_swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  try {
    result = (indri::api::QueryAnnotation *)(arg1)->runAnnotatedQuery((std::string const &)*arg2,arg3);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  *(indri::api::QueryAnnotation **)&_swig_go_result = (indri::api::QueryAnnotation *)result; 
  return _swig_go_result;
}


indri::api::QueryAnnotation *_wrap_QueryEnvironment_runAnnotatedQuery__SWIG_1_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, _gostring_ _swig_go_1, std::vector< int > *_swig_go_2, intgo _swig_go_3) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  int arg4 ;
  indri::api::QueryAnnotation *result = 0 ;
  indri::api::QueryAnnotation *_swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< int > **)&_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  
  try {
    result = (indri::api::QueryAnnotation *)(arg1)->runAnnotatedQuery((std::string const &)*arg2,(std::vector< int > const &)*arg3,arg4);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  *(indri::api::QueryAnnotation **)&_swig_go_result = (indri::api::QueryAnnotation *)result; 
  return _swig_go_result;
}


std::vector< indri::api::ParsedDocument * > *_wrap_QueryEnvironment_documents__SWIG_0_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, std::vector< int > *_swig_go_1) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::vector< int > *arg2 = 0 ;
  SwigValueWrapper< std::vector< indri::api::ParsedDocument * > > result;
  std::vector< indri::api::ParsedDocument * > *_swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  arg2 = *(std::vector< int > **)&_swig_go_1; 
  
  try {
    result = (arg1)->documents((std::vector< int > const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  *(std::vector< indri::api::ParsedDocument * > **)&_swig_go_result = new std::vector< indri::api::ParsedDocument * >(result); 
  return _swig_go_result;
}


std::vector< indri::api::ParsedDocument * > *_wrap_QueryEnvironment_documents__SWIG_1_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, std::vector< indri::api::ScoredExtentResult > *_swig_go_1) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::vector< indri::api::ScoredExtentResult > *arg2 = 0 ;
  SwigValueWrapper< std::vector< indri::api::ParsedDocument * > > result;
  std::vector< indri::api::ParsedDocument * > *_swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  arg2 = *(std::vector< indri::api::ScoredExtentResult > **)&_swig_go_1; 
  
  try {
    result = (arg1)->documents((std::vector< indri::api::ScoredExtentResult > const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  *(std::vector< indri::api::ParsedDocument * > **)&_swig_go_result = new std::vector< indri::api::ParsedDocument * >(result); 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_QueryEnvironment_documentMetadata__SWIG_0_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, std::vector< int > *_swig_go_1, _gostring_ _swig_go_2) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::vector< int > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  arg2 = *(std::vector< int > **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  try {
    result = (arg1)->documentMetadata((std::vector< int > const &)*arg2,(std::string const &)*arg3);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_QueryEnvironment_documentMetadata__SWIG_1_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, std::vector< indri::api::ScoredExtentResult > *_swig_go_1, _gostring_ _swig_go_2) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::vector< indri::api::ScoredExtentResult > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  arg2 = *(std::vector< indri::api::ScoredExtentResult > **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  try {
    result = (arg1)->documentMetadata((std::vector< indri::api::ScoredExtentResult > const &)*arg2,(std::string const &)*arg3);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


std::vector< int > *_wrap_QueryEnvironment_documentIDsFromMetadata_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::string > *_swig_go_2) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  std::vector< int > result;
  std::vector< int > *_swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< std::string > **)&_swig_go_2; 
  
  try {
    result = (arg1)->documentIDsFromMetadata((std::string const &)*arg2,(std::vector< std::string > const &)*arg3);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  *(std::vector< int > **)&_swig_go_result = new std::vector< int >(result); 
  return _swig_go_result;
}


std::vector< indri::api::ParsedDocument * > *_wrap_QueryEnvironment_documentsFromMetadata_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::string > *_swig_go_2) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  SwigValueWrapper< std::vector< indri::api::ParsedDocument * > > result;
  std::vector< indri::api::ParsedDocument * > *_swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< std::string > **)&_swig_go_2; 
  
  try {
    result = (arg1)->documentsFromMetadata((std::string const &)*arg2,(std::vector< std::string > const &)*arg3);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  *(std::vector< indri::api::ParsedDocument * > **)&_swig_go_result = new std::vector< indri::api::ParsedDocument * >(result); 
  return _swig_go_result;
}


long long _wrap_QueryEnvironment_termCount__SWIG_0_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  INT64 result;
  long long _swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  try {
    result = (INT64)(arg1)->termCount();
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_QueryEnvironment_termCount__SWIG_1_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, _gostring_ _swig_go_1) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  INT64 result;
  long long _swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  try {
    result = (INT64)(arg1)->termCount((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_QueryEnvironment_termFieldCount_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  INT64 result;
  long long _swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  try {
    result = (INT64)(arg1)->termFieldCount((std::string const &)*arg2,(std::string const &)*arg3);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  _swig_go_result = result; 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_QueryEnvironment_fieldList_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  try {
    result = (arg1)->fieldList();
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


long long _wrap_QueryEnvironment_documentCount__SWIG_0_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  INT64 result;
  long long _swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  try {
    result = (INT64)(arg1)->documentCount();
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_QueryEnvironment_documentCount__SWIG_1_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, _gostring_ _swig_go_1) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  INT64 result;
  long long _swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  try {
    result = (INT64)(arg1)->documentCount((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  _swig_go_result = result; 
  return _swig_go_result;
}


std::vector< indri::api::DocumentVector * > *_wrap_QueryEnvironment_documentVectors_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, std::vector< int > *_swig_go_1) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::vector< int > *arg2 = 0 ;
  SwigValueWrapper< std::vector< indri::api::DocumentVector * > > result;
  std::vector< indri::api::DocumentVector * > *_swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  arg2 = *(std::vector< int > **)&_swig_go_1; 
  
  try {
    result = (arg1)->documentVectors((std::vector< int > const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  *(std::vector< indri::api::DocumentVector * > **)&_swig_go_result = new std::vector< indri::api::DocumentVector * >(result); 
  return _swig_go_result;
}


double _wrap_QueryEnvironment_expressionCount__SWIG_0_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  try {
    result = (double)(arg1)->expressionCount((std::string const &)*arg2,(std::string const &)*arg3);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_QueryEnvironment_expressionCount__SWIG_1_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, _gostring_ _swig_go_1) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  try {
    result = (double)(arg1)->expressionCount((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_QueryEnvironment_documentExpressionCount__SWIG_0_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  try {
    result = (double)(arg1)->documentExpressionCount((std::string const &)*arg2,(std::string const &)*arg3);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_QueryEnvironment_documentExpressionCount__SWIG_1_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, _gostring_ _swig_go_1) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  try {
    result = (double)(arg1)->documentExpressionCount((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  _swig_go_result = result; 
  return _swig_go_result;
}


std::vector< indri::api::ScoredExtentResult > *_wrap_QueryEnvironment_expressionList__SWIG_0_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  SwigValueWrapper< std::vector< indri::api::ScoredExtentResult > > result;
  std::vector< indri::api::ScoredExtentResult > *_swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  try {
    result = (arg1)->expressionList((std::string const &)*arg2,(std::string const &)*arg3);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  *(std::vector< indri::api::ScoredExtentResult > **)&_swig_go_result = new std::vector< indri::api::ScoredExtentResult >(result); 
  return _swig_go_result;
}


std::vector< indri::api::ScoredExtentResult > *_wrap_QueryEnvironment_expressionList__SWIG_1_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, _gostring_ _swig_go_1) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::vector< indri::api::ScoredExtentResult > > result;
  std::vector< indri::api::ScoredExtentResult > *_swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  try {
    result = (arg1)->expressionList((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  *(std::vector< indri::api::ScoredExtentResult > **)&_swig_go_result = new std::vector< indri::api::ScoredExtentResult >(result); 
  return _swig_go_result;
}


intgo _wrap_QueryEnvironment_documentLength_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, intgo _swig_go_1) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  int arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (int)(arg1)->documentLength(arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_QueryEnvironment_setFormulationParameters_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, indri::api::Parameters *_swig_go_1) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  indri::api::Parameters *arg2 = 0 ;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  arg2 = *(indri::api::Parameters **)&_swig_go_1; 
  
  (arg1)->setFormulationParameters(*arg2);
  
}


_gostring_ _wrap_QueryEnvironment_reformulateQuery_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, _gostring_ _swig_go_1) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (arg1)->reformulateQuery((std::string const &)*arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_QueryEnvironment_stemTerm_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, _gostring_ _swig_go_1) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (arg1)->stemTerm((std::string const &)*arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


long long _wrap_QueryEnvironment_termCountUnique_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  INT64 result;
  long long _swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  result = (INT64)(arg1)->termCountUnique();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_QueryEnvironment_stemCount_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, _gostring_ _swig_go_1) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  INT64 result;
  long long _swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (INT64)(arg1)->stemCount((std::string const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_QueryEnvironment_stemFieldCount_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  INT64 result;
  long long _swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  result = (INT64)(arg1)->stemFieldCount((std::string const &)*arg2,(std::string const &)*arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_QueryEnvironment_documentStemCount_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, _gostring_ _swig_go_1) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  INT64 result;
  long long _swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (INT64)(arg1)->documentStemCount((std::string const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_QueryEnvironment_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_delete_QueryExpander_indri_go_8c4c74c3cec9541e(indri::query::QueryExpander *_swig_go_0) {
  indri::query::QueryExpander *arg1 = (indri::query::QueryExpander *) 0 ;
  
  arg1 = *(indri::query::QueryExpander **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< indri::api::ScoredExtentResult > *_wrap_QueryExpander_runExpandedQuery__SWIG_0_indri_go_8c4c74c3cec9541e(indri::query::QueryExpander *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, bool _swig_go_3) {
  indri::query::QueryExpander *arg1 = (indri::query::QueryExpander *) 0 ;
  std::string arg2 ;
  int arg3 ;
  bool arg4 ;
  SwigValueWrapper< std::vector< indri::api::ScoredExtentResult > > result;
  std::vector< indri::api::ScoredExtentResult > *_swig_go_result;
  
  arg1 = *(indri::query::QueryExpander **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  arg3 = (int)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  
  result = (arg1)->runExpandedQuery(arg2,arg3,arg4);
  *(std::vector< indri::api::ScoredExtentResult > **)&_swig_go_result = new std::vector< indri::api::ScoredExtentResult >(result); 
  return _swig_go_result;
}


std::vector< indri::api::ScoredExtentResult > *_wrap_QueryExpander_runExpandedQuery__SWIG_1_indri_go_8c4c74c3cec9541e(indri::query::QueryExpander *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  indri::query::QueryExpander *arg1 = (indri::query::QueryExpander *) 0 ;
  std::string arg2 ;
  int arg3 ;
  SwigValueWrapper< std::vector< indri::api::ScoredExtentResult > > result;
  std::vector< indri::api::ScoredExtentResult > *_swig_go_result;
  
  arg1 = *(indri::query::QueryExpander **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  arg3 = (int)_swig_go_2; 
  
  result = (arg1)->runExpandedQuery(arg2,arg3);
  *(std::vector< indri::api::ScoredExtentResult > **)&_swig_go_result = new std::vector< indri::api::ScoredExtentResult >(result); 
  return _swig_go_result;
}


_gostring_ _wrap_QueryExpander_expand_indri_go_8c4c74c3cec9541e(indri::query::QueryExpander *_swig_go_0, _gostring_ _swig_go_1, std::vector< indri::api::ScoredExtentResult > *_swig_go_2) {
  indri::query::QueryExpander *arg1 = (indri::query::QueryExpander *) 0 ;
  std::string arg2 ;
  std::vector< indri::api::ScoredExtentResult > *arg3 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(indri::query::QueryExpander **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  arg3 = *(std::vector< indri::api::ScoredExtentResult > **)&_swig_go_2; 
  
  result = (arg1)->expand(arg2,*arg3);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


indri::query::RMExpander *_wrap_new_RMExpander_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, indri::api::Parameters *_swig_go_1) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  indri::api::Parameters *arg2 = 0 ;
  indri::query::RMExpander *result = 0 ;
  indri::query::RMExpander *_swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  arg2 = *(indri::api::Parameters **)&_swig_go_1; 
  
  result = (indri::query::RMExpander *)new indri::query::RMExpander(arg1,*arg2);
  *(indri::query::RMExpander **)&_swig_go_result = (indri::query::RMExpander *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_RMExpander_expand_indri_go_8c4c74c3cec9541e(indri::query::RMExpander *_swig_go_0, _gostring_ _swig_go_1, std::vector< indri::api::ScoredExtentResult > *_swig_go_2) {
  indri::query::RMExpander *arg1 = (indri::query::RMExpander *) 0 ;
  std::string arg2 ;
  std::vector< indri::api::ScoredExtentResult > *arg3 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(indri::query::RMExpander **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  arg3 = *(std::vector< indri::api::ScoredExtentResult > **)&_swig_go_2; 
  
  result = (arg1)->expand(arg2,*arg3);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


void _wrap_delete_RMExpander_indri_go_8c4c74c3cec9541e(indri::query::RMExpander *_swig_go_0) {
  indri::query::RMExpander *arg1 = (indri::query::RMExpander *) 0 ;
  
  arg1 = *(indri::query::RMExpander **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< indri::api::ScoredExtentResult > *_wrap_RMExpander_runExpandedQuery__SWIG_0_indri_go_8c4c74c3cec9541e(indri::query::RMExpander *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, bool _swig_go_3) {
  indri::query::RMExpander *arg1 = (indri::query::RMExpander *) 0 ;
  std::string arg2 ;
  int arg3 ;
  bool arg4 ;
  SwigValueWrapper< std::vector< indri::api::ScoredExtentResult > > result;
  std::vector< indri::api::ScoredExtentResult > *_swig_go_result;
  
  arg1 = *(indri::query::RMExpander **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  arg3 = (int)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  
  indri::query::QueryExpander *swig_b0 = (indri::query::QueryExpander *)arg1;
  result = (swig_b0)->runExpandedQuery(arg2,arg3,arg4);
  *(std::vector< indri::api::ScoredExtentResult > **)&_swig_go_result = new std::vector< indri::api::ScoredExtentResult >(result); 
  return _swig_go_result;
}


std::vector< indri::api::ScoredExtentResult > *_wrap_RMExpander_runExpandedQuery__SWIG_1_indri_go_8c4c74c3cec9541e(indri::query::RMExpander *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  indri::query::RMExpander *arg1 = (indri::query::RMExpander *) 0 ;
  std::string arg2 ;
  int arg3 ;
  SwigValueWrapper< std::vector< indri::api::ScoredExtentResult > > result;
  std::vector< indri::api::ScoredExtentResult > *_swig_go_result;
  
  arg1 = *(indri::query::RMExpander **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  arg3 = (int)_swig_go_2; 
  
  indri::query::QueryExpander *swig_b0 = (indri::query::QueryExpander *)arg1;
  result = (swig_b0)->runExpandedQuery(arg2,arg3);
  *(std::vector< indri::api::ScoredExtentResult > **)&_swig_go_result = new std::vector< indri::api::ScoredExtentResult >(result); 
  return _swig_go_result;
}


indri::query::PonteExpander *_wrap_new_PonteExpander_indri_go_8c4c74c3cec9541e(indri::api::QueryEnvironment *_swig_go_0, indri::api::Parameters *_swig_go_1) {
  indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
  indri::api::Parameters *arg2 = 0 ;
  indri::query::PonteExpander *result = 0 ;
  indri::query::PonteExpander *_swig_go_result;
  
  arg1 = *(indri::api::QueryEnvironment **)&_swig_go_0; 
  arg2 = *(indri::api::Parameters **)&_swig_go_1; 
  
  result = (indri::query::PonteExpander *)new indri::query::PonteExpander(arg1,*arg2);
  *(indri::query::PonteExpander **)&_swig_go_result = (indri::query::PonteExpander *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_PonteExpander_expand_indri_go_8c4c74c3cec9541e(indri::query::PonteExpander *_swig_go_0, _gostring_ _swig_go_1, std::vector< indri::api::ScoredExtentResult > *_swig_go_2) {
  indri::query::PonteExpander *arg1 = (indri::query::PonteExpander *) 0 ;
  std::string arg2 ;
  std::vector< indri::api::ScoredExtentResult > *arg3 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(indri::query::PonteExpander **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  arg3 = *(std::vector< indri::api::ScoredExtentResult > **)&_swig_go_2; 
  
  result = (arg1)->expand(arg2,*arg3);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


void _wrap_delete_PonteExpander_indri_go_8c4c74c3cec9541e(indri::query::PonteExpander *_swig_go_0) {
  indri::query::PonteExpander *arg1 = (indri::query::PonteExpander *) 0 ;
  
  arg1 = *(indri::query::PonteExpander **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< indri::api::ScoredExtentResult > *_wrap_PonteExpander_runExpandedQuery__SWIG_0_indri_go_8c4c74c3cec9541e(indri::query::PonteExpander *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, bool _swig_go_3) {
  indri::query::PonteExpander *arg1 = (indri::query::PonteExpander *) 0 ;
  std::string arg2 ;
  int arg3 ;
  bool arg4 ;
  SwigValueWrapper< std::vector< indri::api::ScoredExtentResult > > result;
  std::vector< indri::api::ScoredExtentResult > *_swig_go_result;
  
  arg1 = *(indri::query::PonteExpander **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  arg3 = (int)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  
  indri::query::QueryExpander *swig_b0 = (indri::query::QueryExpander *)arg1;
  result = (swig_b0)->runExpandedQuery(arg2,arg3,arg4);
  *(std::vector< indri::api::ScoredExtentResult > **)&_swig_go_result = new std::vector< indri::api::ScoredExtentResult >(result); 
  return _swig_go_result;
}


std::vector< indri::api::ScoredExtentResult > *_wrap_PonteExpander_runExpandedQuery__SWIG_1_indri_go_8c4c74c3cec9541e(indri::query::PonteExpander *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  indri::query::PonteExpander *arg1 = (indri::query::PonteExpander *) 0 ;
  std::string arg2 ;
  int arg3 ;
  SwigValueWrapper< std::vector< indri::api::ScoredExtentResult > > result;
  std::vector< indri::api::ScoredExtentResult > *_swig_go_result;
  
  arg1 = *(indri::query::PonteExpander **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  arg3 = (int)_swig_go_2; 
  
  indri::query::QueryExpander *swig_b0 = (indri::query::QueryExpander *)arg1;
  result = (swig_b0)->runExpandedQuery(arg2,arg3);
  *(std::vector< indri::api::ScoredExtentResult > **)&_swig_go_result = new std::vector< indri::api::ScoredExtentResult >(result); 
  return _swig_go_result;
}


intgo _wrap_FileOpen_IndexStatus_indri_go_8c4c74c3cec9541e() {
  indri::api::IndexStatus::action_code result;
  intgo _swig_go_result;
  
  
  result = indri::api::IndexStatus::FileOpen;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_FileSkip_IndexStatus_indri_go_8c4c74c3cec9541e() {
  indri::api::IndexStatus::action_code result;
  intgo _swig_go_result;
  
  
  result = indri::api::IndexStatus::FileSkip;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_FileError_IndexStatus_indri_go_8c4c74c3cec9541e() {
  indri::api::IndexStatus::action_code result;
  intgo _swig_go_result;
  
  
  result = indri::api::IndexStatus::FileError;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_FileClose_IndexStatus_indri_go_8c4c74c3cec9541e() {
  indri::api::IndexStatus::action_code result;
  intgo _swig_go_result;
  
  
  result = indri::api::IndexStatus::FileClose;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_DocumentCount_IndexStatus_indri_go_8c4c74c3cec9541e() {
  indri::api::IndexStatus::action_code result;
  intgo _swig_go_result;
  
  
  result = indri::api::IndexStatus::DocumentCount;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_delete_IndexStatus_indri_go_8c4c74c3cec9541e(indri::api::IndexStatus *_swig_go_0) {
  indri::api::IndexStatus *arg1 = (indri::api::IndexStatus *) 0 ;
  
  arg1 = *(indri::api::IndexStatus **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_IndexStatus_status_indri_go_8c4c74c3cec9541e(indri::api::IndexStatus *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4, intgo _swig_go_5) {
  indri::api::IndexStatus *arg1 = (indri::api::IndexStatus *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = *(indri::api::IndexStatus **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  arg5 = (int)_swig_go_4; 
  arg6 = (int)_swig_go_5; 
  
  (arg1)->status(arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5,arg6);
  
}


indri::api::IndexEnvironment *_wrap_new_IndexEnvironment_indri_go_8c4c74c3cec9541e() {
  indri::api::IndexEnvironment *result = 0 ;
  indri::api::IndexEnvironment *_swig_go_result;
  
  
  result = (indri::api::IndexEnvironment *)new indri::api::IndexEnvironment();
  *(indri::api::IndexEnvironment **)&_swig_go_result = (indri::api::IndexEnvironment *)result; 
  return _swig_go_result;
}


void _wrap_delete_IndexEnvironment_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_IndexEnvironment_setDocumentRoot_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0, _gostring_ _swig_go_1) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  try {
    (arg1)->setDocumentRoot((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_IndexEnvironment_setAnchorTextPath_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0, _gostring_ _swig_go_1) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  try {
    (arg1)->setAnchorTextPath((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_IndexEnvironment_setOffsetMetadataPath_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0, _gostring_ _swig_go_1) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  try {
    (arg1)->setOffsetMetadataPath((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_IndexEnvironment_setOffsetAnnotationsPath_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0, _gostring_ _swig_go_1) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  try {
    (arg1)->setOffsetAnnotationsPath((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_IndexEnvironment_addFileClass__SWIG_0_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4, _gostring_ _swig_go_5, _gostring_ _swig_go_6, _gostring_ _swig_go_7, std::vector< std::string > *_swig_go_8, std::vector< std::string > *_swig_go_9, std::vector< std::string > *_swig_go_10, std::vector< std::string > *_swig_go_11, std::map< indri::parse::ConflationPattern *,std::string > *_swig_go_12) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  std::string *arg8 = 0 ;
  std::vector< std::string > *arg9 = 0 ;
  std::vector< std::string > *arg10 = 0 ;
  std::vector< std::string > *arg11 = 0 ;
  std::vector< std::string > *arg12 = 0 ;
  std::map< indri::parse::ConflationPattern *,std::string > *arg13 = 0 ;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(_swig_go_5.p, _swig_go_5.n);
  arg6 = &arg6_str;
  
  
  std::string arg7_str(_swig_go_6.p, _swig_go_6.n);
  arg7 = &arg7_str;
  
  
  std::string arg8_str(_swig_go_7.p, _swig_go_7.n);
  arg8 = &arg8_str;
  
  arg9 = *(std::vector< std::string > **)&_swig_go_8; 
  arg10 = *(std::vector< std::string > **)&_swig_go_9; 
  arg11 = *(std::vector< std::string > **)&_swig_go_10; 
  arg12 = *(std::vector< std::string > **)&_swig_go_11; 
  arg13 = *(std::map< indri::parse::ConflationPattern *,std::string > **)&_swig_go_12; 
  
  try {
    (arg1)->addFileClass((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,(std::string const &)*arg8,(std::vector< std::string > const &)*arg9,(std::vector< std::string > const &)*arg10,(std::vector< std::string > const &)*arg11,(std::vector< std::string > const &)*arg12,(std::map< indri::parse::ConflationPattern *,std::string > const &)*arg13);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


indri::parse::FileClassEnvironmentFactory::Specification *_wrap_IndexEnvironment_getFileClassSpec_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0, _gostring_ _swig_go_1) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  indri::parse::FileClassEnvironmentFactory::Specification *result = 0 ;
  indri::parse::FileClassEnvironmentFactory::Specification *_swig_go_result;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  try {
    result = (indri::parse::FileClassEnvironmentFactory::Specification *)(arg1)->getFileClassSpec((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  *(indri::parse::FileClassEnvironmentFactory::Specification **)&_swig_go_result = (indri::parse::FileClassEnvironmentFactory::Specification *)result; 
  return _swig_go_result;
}


void _wrap_IndexEnvironment_addFileClass__SWIG_1_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0, indri::parse::FileClassEnvironmentFactory::Specification *_swig_go_1) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  indri::parse::FileClassEnvironmentFactory::Specification *arg2 = 0 ;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  arg2 = *(indri::parse::FileClassEnvironmentFactory::Specification **)&_swig_go_1; 
  
  try {
    (arg1)->addFileClass((indri::parse::FileClassEnvironmentFactory::Specification const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_IndexEnvironment_deleteDocument_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0, intgo _swig_go_1) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  int arg2 ;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    (arg1)->deleteDocument(arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_IndexEnvironment_setIndexedFields_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0, std::vector< std::string > *_swig_go_1) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  
  try {
    (arg1)->setIndexedFields((std::vector< std::string > const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_IndexEnvironment_setNumericField__SWIG_0_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2, _gostring_ _swig_go_3) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  std::string *arg4 = 0 ;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (bool)_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  try {
    (arg1)->setNumericField((std::string const &)*arg2,arg3,(std::string const &)*arg4);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_IndexEnvironment_setNumericField__SWIG_1_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (bool)_swig_go_2; 
  
  try {
    (arg1)->setNumericField((std::string const &)*arg2,arg3);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_IndexEnvironment_setOrdinalField_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (bool)_swig_go_2; 
  
  try {
    (arg1)->setOrdinalField((std::string const &)*arg2,arg3);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_IndexEnvironment_setParentalField_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (bool)_swig_go_2; 
  
  try {
    (arg1)->setParentalField((std::string const &)*arg2,arg3);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_IndexEnvironment_setMetadataIndexedFields_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0, std::vector< std::string > *_swig_go_1, std::vector< std::string > *_swig_go_2) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  arg3 = *(std::vector< std::string > **)&_swig_go_2; 
  
  try {
    (arg1)->setMetadataIndexedFields((std::vector< std::string > const &)*arg2,(std::vector< std::string > const &)*arg3);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_IndexEnvironment_setStopwords_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0, std::vector< std::string > *_swig_go_1) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  
  try {
    (arg1)->setStopwords((std::vector< std::string > const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_IndexEnvironment_setStemmer_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0, _gostring_ _swig_go_1) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  try {
    (arg1)->setStemmer((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_IndexEnvironment_setMemory_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0, long long _swig_go_1) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  UINT64 arg2 ;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  arg2 = (UINT64)_swig_go_1; 
  
  try {
    (arg1)->setMemory(arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_IndexEnvironment_setNormalization_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0, bool _swig_go_1) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  bool arg2 ;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  try {
    (arg1)->setNormalization(arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_IndexEnvironment_setStoreDocs_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0, bool _swig_go_1) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  bool arg2 ;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  try {
    (arg1)->setStoreDocs(arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_IndexEnvironment_create__SWIG_0_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0, _gostring_ _swig_go_1, indri::api::IndexStatus *_swig_go_2) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  indri::api::IndexStatus *arg3 = (indri::api::IndexStatus *) 0 ;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(indri::api::IndexStatus **)&_swig_go_2; 
  
  try {
    (arg1)->create((std::string const &)*arg2,arg3);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_IndexEnvironment_create__SWIG_1_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0, _gostring_ _swig_go_1) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  try {
    (arg1)->create((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_IndexEnvironment_open__SWIG_0_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0, _gostring_ _swig_go_1, indri::api::IndexStatus *_swig_go_2) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  indri::api::IndexStatus *arg3 = (indri::api::IndexStatus *) 0 ;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(indri::api::IndexStatus **)&_swig_go_2; 
  
  try {
    (arg1)->open((std::string const &)*arg2,arg3);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_IndexEnvironment_open__SWIG_1_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0, _gostring_ _swig_go_1) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  try {
    (arg1)->open((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_IndexEnvironment_close_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  
  try {
    (arg1)->close();
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_IndexEnvironment_addFile__SWIG_0_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0, _gostring_ _swig_go_1) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  try {
    (arg1)->addFile((std::string const &)*arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


void _wrap_IndexEnvironment_addFile__SWIG_1_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  try {
    (arg1)->addFile((std::string const &)*arg2,(std::string const &)*arg3);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  
}


intgo _wrap_IndexEnvironment_addString_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, std::vector< indri::parse::MetadataPair > *_swig_go_3) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< indri::parse::MetadataPair > *arg4 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = *(std::vector< indri::parse::MetadataPair > **)&_swig_go_3; 
  
  try {
    result = (int)(arg1)->addString((std::string const &)*arg2,(std::string const &)*arg3,(std::vector< indri::parse::MetadataPair > const &)*arg4);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_IndexEnvironment_addParsedDocument_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0, indri::api::ParsedDocument *_swig_go_1) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  indri::api::ParsedDocument *arg2 = (indri::api::ParsedDocument *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  arg2 = *(indri::api::ParsedDocument **)&_swig_go_1; 
  
  try {
    result = (int)(arg1)->addParsedDocument(arg2);
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_IndexEnvironment_documentsIndexed_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  
  try {
    result = (int)(arg1)->documentsIndexed();
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_IndexEnvironment_documentsSeen_indri_go_8c4c74c3cec9541e(indri::api::IndexEnvironment *_swig_go_0) {
  indri::api::IndexEnvironment *arg1 = (indri::api::IndexEnvironment *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(indri::api::IndexEnvironment **)&_swig_go_0; 
  
  try {
    result = (int)(arg1)->documentsSeen();
  }
  catch(lemur::api::Exception &_e) {
    (void)_e;
    _swig_gopanic("C++ lemur::api::Exception exception thrown");
    
  }
  
  _swig_go_result = result; 
  return _swig_go_result;
}


#ifdef __cplusplus
}
#endif

