
#ifdef SWIGGO

/* -----------------------------------------------------------------------------
 * protect_pre.i (also see protect_post.i)
 * use to convert GO panics and C++ exceptions into GO errors.
 *
 * since swig says %rename should be called before a class definition,
 * including the protection code is split into two parts with the protect_pre.i
 * included first, followed by including the class interface definitions, and
 * then the protect_post.i definitions (like a sandwich bread protecting meat).
 *
 * notes:
 * 1) exception handling order controls behavior. Meaning, if the wrong
 * handler is reached first, the resulting behavior may not be as expected.
 * use swig exception.i when C++ throws std_exception, see example usage.
 * wrap C++ code that throws LemurException with setEx(method), see various
 * interface files.
 *
 * 2) TODO: %module_id directive == %module_%unique_id from swig would be nice.
 * swig appends %module name and a unique_id (16 hex digits) as object id suffix.
 * search for unique_id in file ~/Work/swig-3.0.12/Source/Modules/go.cxx
 * the unique_id changes when the primary interface module indri.i is modified.
 *
 * the preferred panic protection pattern requires that we %rename class
 * constructors that are wrapped in order to extend the go interface that
 * wraps the C++ class methods with modified signature that converts panic
 * to go errors.
 *
 * any interface class we wrap with the preferred panic protection pattern
 * needs to be edited to adjust unique ids, and the swig command needs to be
 * run again to ensure the generated go file has consistent unique ids.
 *
 * There is no swig feature that helps with this adjustment automatically.
 * as an example, the egrep command below can be used to find such object ids.
 *
 * assuming our wrapped method includes a unique_id reference that is
 * mismatched when compared to the unique_id generated by swig, edit the
 * interface file and run the swig command again.
 *
 * egrep --color '_indri_go_[0123456789abcdef]{16}' indri_go.go
 * extern void _wrap_Swig_free_indri_go_c2859e9b02de2b??(uintptr_t arg1);
 * ...
 * egrep --color '_indri_go_[0123456789abcdef]{16}' *.i
 * IndexEnvironment_post.i:    return (IndexEnvironment)(SwigcptrWrapped_IndexEnvironment(C._wrap_new_Wrapped_IndexEnvironment_indri_go_8e24520e0b567f??()))
 * ...
 *
 * a) C++ code can vector to SWIG_exception defined in swig's go/exception.i,
 * that dispatches to _swig_gopanic defined in go/goruntime.swg, that in turn
 * crosses into the cgo compiler environment (_cgo_panic). The C/C++ panic
 * message returned is of type "const char *".
 *
 * b) C++ object class methods also vector to the LemurExcepion.i handler,
 * a common exception pattern used in Indri. This pattern requires the C++
 * methods that throw an exception be wrapped with "setEx" to dispatch
 * exceptions to SWIG_exception as discussed above.
 *
 * c) Preferred pattern - extend swig go wrapped arbitrary C/C++ class and
 * add error return type to class method signatures. patterned after
 * reference: https://github.com/jsolmon/go-swig-exceptions
 *
 * ----------------------------------------------------------------------------- */

//
// start of header section
// this section is header material that does not strictly belong here.
//
// when indri.i is modified, the module unique_id is regenerated, so we collect
// %includes here to avoid manual re-fix-up of the unique_id references. this
// scheme will break when swig code generation becomes smarter and recognizes
// nested %includes, but hopefully by that release comes a new feature
// allowing us to append the unique_id pre-expansion.
//

//
// indri distribution version is a #define in the c header below. here we
// store the version string in a global we can reference from GO.
//
%{
#include "indri/indri-platform.h"
const std::string indriVersion(INDRI_DISTRIBUTION);
%}
extern const std::string indriVersion;

//
// this is here so we don't pollute indri.i - buildindex is application code
// and not strictly part of the library.
//
%include "IndriBuildIndex.i"

//
// end of header section
//



/*
 * rename classes to further extend its wrapped interface to convert exceptions
 * to go errors. Any method that throws exceptions needs to be wrapped this way.
 */

%rename(Wrapped_Parameters) indri::api::Parameters;
%rename(Wrapped_Load) indri::api::Parameters::Load;


%rename(Wrapped_IndexEnvironment) indri::api::IndexEnvironment;
%rename(Wrapped_setDocumentRoot) indri::api::IndexEnvironment::setDocumentRoot;
%rename(Wrapped_setAnchorTextPath) indri::api::IndexEnvironment::setAnchorTextPath;
%rename(Wrapped_addString) indri::api::IndexEnvironment::addString;
%rename(Wrapped_setOffsetMetadataPath) indri::api::IndexEnvironment::setOffsetMetadataPath;
%rename(Wrapped_setOffsetAnnotationsPath) indri::api::IndexEnvironment::setOffsetAnnotationsPath;
%rename(Wrapped_getFileClassSpec) indri::api::IndexEnvironment::getFileClassSpec;
%rename(Wrapped_addFileClass) indri::api::IndexEnvironment::addFileClass;
%rename(Wrapped_deleteDocument) indri::api::IndexEnvironment::deleteDocument;
%rename(Wrapped_setIndexedFields) indri::api::IndexEnvironment::setIndexedFields;
%rename(Wrapped_setNumericField) indri::api::IndexEnvironment::setNumericField;
%rename(Wrapped_setOrdinalField) indri::api::IndexEnvironment::setOrdinalField;
%rename(Wrapped_setParentalField) indri::api::IndexEnvironment::setParentalField;
%rename(Wrapped_setMetadataIndexedFields) indri::api::IndexEnvironment::setMetadataIndexedFields;
%rename(Wrapped_setStopwords) indri::api::IndexEnvironment::setStopwords;
%rename(Wrapped_setStemmer) indri::api::IndexEnvironment::setStemmer;
%rename(Wrapped_setMemory) indri::api::IndexEnvironment::setMemory;
%rename(Wrapped_setNormalization) indri::api::IndexEnvironment::setNormalization;
%rename(Wrapped_setStoreDocs) indri::api::IndexEnvironment::setStoreDocs;
%rename(Wrapped_create) indri::api::IndexEnvironment::create;
%rename(Wrapped_open) indri::api::IndexEnvironment::open;
%rename(Wrapped_close) indri::api::IndexEnvironment::close;
%rename(Wrapped_addFile) indri::api::IndexEnvironment::addFile;
%rename(Wrapped_addString) indri::api::IndexEnvironment::addString;
%rename(Wrapped_addParsedDocument) indri::api::IndexEnvironment::addParsedDocument;
%rename(Wrapped_documentsIndexed) indri::api::IndexEnvironment::documentsIndexed;
%rename(Wrapped_documentsSeen) indri::api::IndexEnvironment::documentsSeen;


%rename(Wrapped_deleteFileClassSpec) deleteFileClassSpec;


%rename(Wrapped_MetadataPair) indri::parse::MetadataPair;
// the commented out rename will not work because the reference is a template
// name, and not a class name. So we need to created a wrapped class manually.
// see MetadataPairVector_post.i
//%rename(Wrapped_MetadataPairVector) MetadataPairVector;

#endif
